diff --git a/infiniswap_daemon/configure.ac b/infiniswap_daemon/configure.ac
index c7633af..2cc8c01 100644
--- a/infiniswap_daemon/configure.ac
+++ b/infiniswap_daemon/configure.ac
@@ -72,10 +72,12 @@ AC_PROG_RANLIB
 AC_CHECK_LIB([ibverbs], [ibv_get_device_list], [], [AC_MSG_ERROR([libibverbs not found])])
 AC_CHECK_LIB([pthread], [pthread_create], [], AC_MSG_ERROR([libpthread not found]))
 AC_CHECK_LIB([rdmacm], [rdma_create_event_channel], [], AC_MSG_ERROR([librdmacm-devel not found]))
+AC_CHECK_LIB([pmem], [pmem_map_file, pmem_unmap], [], AC_MSG_ERROR([libpmem not found]))
 
 # Checks for header files.
 AC_CHECK_HEADERS([arpa/inet.h netdb.h netinet/in.h stdlib.h string.h unistd.h])
 AC_CHECK_HEADERS([infiniband/verbs.h], [], [AC_MSG_ERROR([ibverbs header files not found])])
+AC_CHECK_HEADERS([libpmem.h], [], [AC_MSG_ERROR([libpmem header files not found])])
 
 # Checks for typedefs, structures, and compiler characteristics.
 AC_TYPE_UINT16_T
diff --git a/infiniswap_daemon/rdma-common.c b/infiniswap_daemon/rdma-common.c
index e1c3af8..46e5edf 100644
--- a/infiniswap_daemon/rdma-common.c
+++ b/infiniswap_daemon/rdma-common.c
@@ -8,6 +8,10 @@
 extern long page_size;
 extern int running;
 
+#ifdef USE_PMEM
+static long pmem_gb = 8
+#endif
+
 static void build_context(struct ibv_context *verbs);
 static void build_qp_attr(struct ibv_qp_init_attr *qp_attr);
 static void on_completion(struct ibv_wc *);
@@ -59,6 +63,9 @@ void die(const char *reason)
 
 long get_free_mem(void)
 {
+#ifdef USE_PMEM
+  return pmem_gb;
+#endif
   char result[60];
   FILE *fd = fopen("/proc/meminfo", "r");
   int i;
@@ -207,6 +214,18 @@ void * get_serving_mem_region(void *context)
   return ((struct connection *)context)->rdma_remote_region;
 }
 
+#ifdef USE_PMEM
+inline int get_digits(unsigned int num)
+{
+  int count = 0;
+  while (num != 0) {
+    count++;
+    num /= 10;
+  }
+  return count;
+}
+#endif
+
 void rdma_session_init(struct rdma_session *sess){
   int free_mem_g;
   int i;
@@ -217,6 +236,11 @@ void rdma_session_init(struct rdma_session *sess){
     sess->rdma_remote.conn_map[i] = -1;
     sess->rdma_remote.conn_chunk_map[i] = -1;
     sess->rdma_remote.malloc_map[i] = CHUNK_EMPTY;
+#ifdef USE_PMEM
+    char *name = (char *)malloc(sizeof(USE_PMEM)+get_digits(MAX_FREE_MEM_GB)+1);
+    sprintf(name, "%s/%d", USE_PMEM, i);
+    sess->rdma_remote.region_name[i] = name;
+#endif
   }
 
   if (free_mem_g > FREE_MEM_EXPAND_THRESHOLD){
@@ -231,7 +255,12 @@ void rdma_session_init(struct rdma_session *sess){
   }
 
   for (i=0; i < free_mem_g; i++){
+#ifndef USE_PMEM
     posix_memalign((void **)&(sess->rdma_remote.region_list[i]), page_size, ONE_GB);
+#else
+    sess->rdma_remote.region_list[i] = pmem_map_file(sess->rdma_remote.region_name[i], ONE_GB, PMEM_FILE_CREATE, 0666, &(sess->rdma_remote.region_mapped_size[i]), NULL);
+    pmem_gb--;
+#endif
     memset(sess->rdma_remote.region_list[i], 0x00, ONE_GB);
     sess->rdma_remote.malloc_map[i] = CHUNK_MALLOCED;
   }
@@ -269,7 +298,12 @@ void evict_mem(int stop_g)
   //free unmapped chunk
   for (i = 0; i < MAX_FREE_MEM_GB ;i++) {
     if (session.rdma_remote.malloc_map[i] == CHUNK_MALLOCED && session.rdma_remote.conn_map[i] == -1){
+#ifdef USE_PMEM
+      pmem_unmap(session.rdma_remote.region_list[i], session.rdma_remote.region_mapped_size[i]);
+      pmem_gb++;
+#else
       free(session.rdma_remote.region_list[i]);
+#endif
       session.rdma_remote.malloc_map[i] = CHUNK_EMPTY;
       freed_g += 1;
       if (freed_g == evict_g){
@@ -457,7 +491,11 @@ void* free_mem(void *data)
         j = 0;
         for (i = 0; i < MAX_FREE_MEM_GB; i++){
           if (session.rdma_remote.malloc_map[i] == CHUNK_EMPTY){
+#ifndef USE_PMEM
             posix_memalign((void **)&(session.rdma_remote.region_list[i]), page_size, ONE_GB);
+#else
+            session.rdma_remote.region_list[i] = pmem_map_file(session.rdma_remote.region_name[i], ONE_GB, PMEM_FILE_CREATE, 0666, &(session.rdma_remote.region_mapped_size[i]), NULL);
+#endif
             memset(session.rdma_remote.region_list[i], 0x00, ONE_GB);
             session.rdma_remote.malloc_map[i] = CHUNK_MALLOCED;
             j += 1;
@@ -488,7 +526,11 @@ void recv_done(struct connection *conn)
       index = conn->sess_chunk_map[i];
       conn->sess_chunk_map[i] = -1;
       ibv_dereg_mr(session.rdma_remote.mr_list[index]);
+#ifdef USE_PMEM
+      pmem_unmap(session.rdma_remote.region_list[index], session.rdma_remote.region_mapped_size[index]);
+#else
       free(session.rdma_remote.region_list[index]);
+#endif
       session.rdma_remote.conn_map[index] = -1;
       session.rdma_remote.malloc_map[index] = CHUNK_EMPTY;
       session.rdma_remote.conn_chunk_map[index] = -1;
@@ -742,4 +784,4 @@ void  send_terminate(void *context)
   struct connection *conn = (struct connection *)context;
   conn->send_msg->type = DONE;
   send_message(conn);
-}
\ No newline at end of file
+}
diff --git a/infiniswap_daemon/rdma-common.h b/infiniswap_daemon/rdma-common.h
index e0740e5..9d99548 100644
--- a/infiniswap_daemon/rdma-common.h
+++ b/infiniswap_daemon/rdma-common.h
@@ -6,6 +6,8 @@
 #ifndef RDMA_COMMON_H
 #define RDMA_COMMON_H
 
+#define USE_PMEM "/mnt/pmem0"
+
 #include <netdb.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -18,6 +20,10 @@
 #include <netinet/in.h>
 #include <linux/kernel.h>
 
+#ifdef USE_PMEM
+#include <libpmem.h>
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
@@ -179,6 +185,10 @@ struct connection {
 #define CHUNK_MALLOCED 1
 #define CHUNK_EMPTY	0
 struct rdma_remote_mem{
+#ifdef USE_PMEM
+  char *region_name[MAX_FREE_MEM_GB];
+  size_t region_mapped_size[MAX_FREE_MEM_GB];
+#endif
   char* region_list[MAX_FREE_MEM_GB];
   struct ibv_mr* mr_list[MAX_FREE_MEM_GB]; 
   int size_gb; 
