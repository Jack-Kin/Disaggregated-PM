diff --git a/infiniswap_daemon/rdma-common.c b/infiniswap_daemon/rdma-common.c
index e1c3af8..0bf9809 100644
--- a/infiniswap_daemon/rdma-common.c
+++ b/infiniswap_daemon/rdma-common.c
@@ -207,6 +207,18 @@ void * get_serving_mem_region(void *context)
   return ((struct connection *)context)->rdma_remote_region;
 }
 
+#ifdef USE_PMEM
+inline int get_digits(unsigned int num)
+{
+  int count = 0;
+  while (num != 0) {
+    count++;
+    num /= 10;
+  }
+  return count;
+}
+#endif
+
 void rdma_session_init(struct rdma_session *sess){
   int free_mem_g;
   int i;
@@ -217,6 +229,11 @@ void rdma_session_init(struct rdma_session *sess){
     sess->rdma_remote.conn_map[i] = -1;
     sess->rdma_remote.conn_chunk_map[i] = -1;
     sess->rdma_remote.malloc_map[i] = CHUNK_EMPTY;
+#ifdef USE_PMEM
+    char *name = (char *)malloc(sizeof(USE_PMEM)+get_digits(MAX_FREE_MEM_GB)+1);
+    sprintf(name, "%s/%d", USE_PMEM, i);
+    sess->rdma_remote.region_name[i] = name;
+#endif
   }
 
   if (free_mem_g > FREE_MEM_EXPAND_THRESHOLD){
@@ -231,7 +248,11 @@ void rdma_session_init(struct rdma_session *sess){
   }
 
   for (i=0; i < free_mem_g; i++){
+#ifndef USE_PMEM
     posix_memalign((void **)&(sess->rdma_remote.region_list[i]), page_size, ONE_GB);
+#else
+    sess->rdma_remote.region_list[i]) = pmem_map_file(sess->rdma_remote.region_name[i], ONE_GB, PMEM_FILE_CREATE, 0666, &(sess->rdma_remote.region_mapped_size[i]), NULL);
+#endif
     memset(sess->rdma_remote.region_list[i], 0x00, ONE_GB);
     sess->rdma_remote.malloc_map[i] = CHUNK_MALLOCED;
   }
@@ -269,7 +290,11 @@ void evict_mem(int stop_g)
   //free unmapped chunk
   for (i = 0; i < MAX_FREE_MEM_GB ;i++) {
     if (session.rdma_remote.malloc_map[i] == CHUNK_MALLOCED && session.rdma_remote.conn_map[i] == -1){
+#ifdef USE_PMEM
+      pmem_unmap(session.rdma_remote.region_list[i], session.rdma_remote.region_mapped_size[i]);
+#else
       free(session.rdma_remote.region_list[i]);
+#endif
       session.rdma_remote.malloc_map[i] = CHUNK_EMPTY;
       freed_g += 1;
       if (freed_g == evict_g){
@@ -457,7 +482,11 @@ void* free_mem(void *data)
         j = 0;
         for (i = 0; i < MAX_FREE_MEM_GB; i++){
           if (session.rdma_remote.malloc_map[i] == CHUNK_EMPTY){
+#ifndef USE_PMEM
             posix_memalign((void **)&(session.rdma_remote.region_list[i]), page_size, ONE_GB);
+#else
+            session.rdma_remote.region_list[i]) = pmem_map_file(session.rdma_remote.region_name[i], ONE_GB, PMEM_FILE_CREATE, 0666, &(session.rdma_remote.region_mapped_size[i]), NULL);
+#endif
             memset(session.rdma_remote.region_list[i], 0x00, ONE_GB);
             session.rdma_remote.malloc_map[i] = CHUNK_MALLOCED;
             j += 1;
@@ -488,7 +517,11 @@ void recv_done(struct connection *conn)
       index = conn->sess_chunk_map[i];
       conn->sess_chunk_map[i] = -1;
       ibv_dereg_mr(session.rdma_remote.mr_list[index]);
+#ifdef USE_PMEM
+      pmem_unmap(session.rdma_remote.region_list[index], session.rdma_remote.region_mapped_size[index]);
+#else
       free(session.rdma_remote.region_list[index]);
+#endif
       session.rdma_remote.conn_map[index] = -1;
       session.rdma_remote.malloc_map[index] = CHUNK_EMPTY;
       session.rdma_remote.conn_chunk_map[index] = -1;
diff --git a/infiniswap_daemon/rdma-common.h b/infiniswap_daemon/rdma-common.h
index e0740e5..50ccd4b 100644
--- a/infiniswap_daemon/rdma-common.h
+++ b/infiniswap_daemon/rdma-common.h
@@ -18,6 +18,10 @@
 #include <netinet/in.h>
 #include <linux/kernel.h>
 
+#ifdef USE_PMEM
+#include <libpmem.h>
+#endif
+
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
@@ -179,6 +183,10 @@ struct connection {
 #define CHUNK_MALLOCED 1
 #define CHUNK_EMPTY	0
 struct rdma_remote_mem{
+#ifdef USE_PMEM
+  char *region_name[MAX_FREE_MEM_GB];
+  size_t region_mapped_size[MAX_FREE_MEM_GB];
+#endif
   char* region_list[MAX_FREE_MEM_GB];
   struct ibv_mr* mr_list[MAX_FREE_MEM_GB]; 
   int size_gb; 
